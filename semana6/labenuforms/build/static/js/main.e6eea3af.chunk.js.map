{"version":3,"sources":["components/Etapa1.js","components/Etapa2.js","components/Etapa3.js","components/Final.js","App.js","serviceWorker.js","index.js"],"names":["ContainerEtapa1","styled","div","Etapa1","type","value","React","Component","ContainerEtapa2","Etapa2","start","ContainerEtapa3","Etapa3","ContainerFinal","Final","App","state","etapa","proximaEtapa","props","setState","console","log","renderizaEtapa","this","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qcAGA,IAAMA,EAAkBC,IAAOC,IAAV,KAORC,EAAb,uKAGI,OACE,kBAACH,EAAD,KACE,qDACA,4BACE,gDACA,2BAAOI,KAAK,SACZ,+CACA,2BAAOA,KAAK,SACZ,+CACA,2BAAOA,KAAK,SACZ,wDACA,gCACE,4BAAQC,MAAM,8BAAd,8BACA,4BAAQA,MAAM,4BAAd,4BACA,4BAAQA,MAAM,8BAAd,8BACA,4BAAQA,MAAM,4BAAd,mCAlBZ,GAA4BC,IAAMC,W,sKCLhC,IAAMC,EAAkBP,IAAOC,IAAV,KAOVO,EAAb,uKAGI,OACE,kBAACD,EAAD,KACE,6EACA,wBAAIE,MAAM,KACR,2CACA,2BAAON,KAAK,SACZ,yDACA,2BAAOA,KAAK,eAVtB,GAA4BE,IAAMC,W,sKCRlC,IAAMI,EAAkBV,IAAOC,IAAV,KAORU,EAAb,uKAGI,OACE,kBAACD,EAAD,KACE,2EACA,wBAAID,MAAM,KACR,4FACA,2BAAON,KAAK,SACZ,qEACA,2BAAOA,KAAK,eAVtB,GAA4BE,IAAMC,W,2LCRlC,IAAMM,EAAiBZ,IAAOC,IAAV,KAQPY,EAAb,uKAGI,OACE,kBAACD,EAAD,KACE,sDACA,yFANR,GAA2BP,IAAMC,WCoDlBQ,E,4MAvDbC,MAAQ,CACNC,MAAO,G,EAGTC,aAAe,SAACC,GACd,EAAKC,SAAU,CAAEH,MAAM,EAAKD,MAAMC,MAAQ,IAC1CI,QAAQC,IAAK,EAAKN,MAAMC,Q,EAI1BM,eAAiB,WACf,OAAQ,EAAKP,MAAMC,OACjB,KAAK,EACH,OACE,kBAAC,EAAD,MAIJ,KAAK,EACH,OACE,kBAAC,EAAD,MAIJ,KAAK,EACH,OACE,kBAAC,EAAD,MAIJ,KAAK,EACH,OAEE,kBAAC,EAAD,Q,uDASR,OACEO,KAAKR,MAAMC,MAAQ,EACnB,6BACGO,KAAKD,iBACN,4BAAQE,QAASD,KAAKN,cAAtB,qBAGF,6BACGM,KAAKD,sB,GAnDMjB,IAAMC,WCKJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.e6eea3af.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst ContainerEtapa1 = styled.div `\r\n  border: 1px solid black;\r\n  display: flex;\r\n  flex-direction:column;\r\n  align-items:center;\r\n`\r\n\r\nexport class Etapa1 extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <ContainerEtapa1>\r\n        <h1>ETAPA1 - DADOS GERAIS</h1>\r\n        <ol>\r\n          <li>Qual o seu nome?</li>\r\n          <input type=\"text\"></input>\r\n          <li>Qual sua idade?</li>\r\n          <input type=\"text\"></input>\r\n          <li>Qual seu email?</li>\r\n          <input type=\"text\"></input>\r\n          <li>Qual a sua escolaridade?</li>\r\n          <select>\r\n            <option value=\"Ensino médio incompleto\">Ensino médio incompleto</option>\r\n            <option value=\"Ensino médio completo\">Ensino médio completo</option>\r\n            <option value=\"Ensino superior incompleto\">Ensino superior incompleto</option>\r\n            <option value=\"Ensino médio completo\">Ensino superior completo</option>\r\n          </select>\r\n        </ol>\r\n        \r\n      </ContainerEtapa1>\r\n\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\n  const ContainerEtapa2 = styled.div `\r\n  border: 1px solid black;\r\n  display: flex;\r\n  flex-direction:column;\r\n  align-items:center;\r\n`\r\n\r\nexport class Etapa2 extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <ContainerEtapa2>\r\n        <h1>ETAPA2 - INFORMAÇÕES DO ENSINO SUPERIOR</h1>\r\n        <ol start=\"5\">\r\n          <li>Qual curso?</li>\r\n          <input type=\"text\"></input>\r\n          <li>Qual a unidade de ensino?</li>  \r\n          <input type=\"text\"></input>        \r\n        </ol>\r\n        \r\n        \r\n      </ContainerEtapa2>\r\n\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst ContainerEtapa3 = styled.div `\r\n  border: 1px solid black;\r\n  display: flex;\r\n  flex-direction:column;\r\n  align-items:center;\r\n`\r\n\r\nexport class Etapa3 extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <ContainerEtapa3>\r\n        <h1>ETAPA3 - INFORMAÇÕES GERAIS DE ENSINO</h1>\r\n        <ol start=\"5\">\r\n          <li>Por que você não terminou um curso de graduação?</li>\r\n          <input type=\"text\"></input>\r\n          <li>Você fez algum curso complementar?</li>\r\n          <input type=\"text\"></input>          \r\n        </ol>\r\n        \r\n        \r\n      </ContainerEtapa3>\r\n\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst ContainerFinal = styled.div `\r\n  border: 1px solid black;\r\n  display: flex;\r\n  flex-direction:column;\r\n  align-items:center;\r\n  font-weight:bold;\r\n`\r\n\r\nexport class Final extends React.Component {\r\n\r\n  render() {\r\n    return(\r\n      <ContainerFinal>\r\n        <h1>O FORMULÁRIO ACABOU</h1>\r\n        <p>Muito obrigado por participar! entraremos em contato!</p>\r\n        \r\n      </ContainerFinal>\r\n\r\n    )\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport {Etapa1} from './components/Etapa1'\nimport {Etapa2} from './components/Etapa2'\nimport {Etapa3} from './components/Etapa3'\nimport {Final} from './components/Final'\n\nclass App extends React.Component {\n  state = {\n    etapa: 1,\n  }\n\n  proximaEtapa = (props) => {\n    this.setState ({ etapa:this.state.etapa + 1} );\n    console.log (this.state.etapa)    \n  };\n  \n  \n  renderizaEtapa = () => {\n    switch (this.state.etapa) {\n      case 1:\n        return (\n          <Etapa1>\n\n          </Etapa1>\n        );\n      case 2:\n        return (\n          <Etapa2>\n  \n          </Etapa2>\n        );\n      case 3:\n        return (\n          <Etapa3>\n\n          </Etapa3>\n        );\n      case 4:\n        return (\n          \n          <Final>\n\n          </Final>          \n        );\n      default:\n    }\n  }  \n\nrender () {\n  return (\n    this.state.etapa < 4 ?\n    <div>\n      {this.renderizaEtapa()}\n      <button onClick={this.proximaEtapa}>Próxima Etapa</button>     \n    </div>\n    :\n    <div>\n      {this.renderizaEtapa()}\n    </div>   \n  );\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}